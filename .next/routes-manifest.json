{
  "version": 3,
  "pages404": true,
  "caseSensitive": false,
  "basePath": "",
  "redirects": [
    {
      "source": "/:path+/",
      "destination": "/:path+",
      "internal": true,
      "statusCode": 308,
      "regex": "^(?:/((?:[^/]+?)(?:/(?:[^/]+?))*))/$"
    }
  ],
  "headers": [],
  "dynamicRoutes": [
    {
      "page": "/api/essays/[id]",
      "regex": "^/api/essays/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPid": "nxtPid"
      },
      "namedRegex": "^/api/essays/(?<nxtPid>[^/]+?)(?:/)?$"
    },
    {
      "page": "/api/essays/[id]/analyze",
      "regex": "^/api/essays/([^/]+?)/analyze(?:/)?$",
      "routeKeys": {
        "nxtPid": "nxtPid"
      },
      "namedRegex": "^/api/essays/(?<nxtPid>[^/]+?)/analyze(?:/)?$"
    },
    {
      "page": "/api/essays/[id]/comments",
      "regex": "^/api/essays/([^/]+?)/comments(?:/)?$",
      "routeKeys": {
        "nxtPid": "nxtPid"
      },
      "namedRegex": "^/api/essays/(?<nxtPid>[^/]+?)/comments(?:/)?$"
    },
    {
      "page": "/api/essays/[id]/feedback",
      "regex": "^/api/essays/([^/]+?)/feedback(?:/)?$",
      "routeKeys": {
        "nxtPid": "nxtPid"
      },
      "namedRegex": "^/api/essays/(?<nxtPid>[^/]+?)/feedback(?:/)?$"
    },
    {
      "page": "/api/essays/[id]/feedback/[feedbackId]/scores",
      "regex": "^/api/essays/([^/]+?)/feedback/([^/]+?)/scores(?:/)?$",
      "routeKeys": {
        "nxtPid": "nxtPid",
        "nxtPfeedbackId": "nxtPfeedbackId"
      },
      "namedRegex": "^/api/essays/(?<nxtPid>[^/]+?)/feedback/(?<nxtPfeedbackId>[^/]+?)/scores(?:/)?$"
    },
    {
      "page": "/api/essays/[id]/like",
      "regex": "^/api/essays/([^/]+?)/like(?:/)?$",
      "routeKeys": {
        "nxtPid": "nxtPid"
      },
      "namedRegex": "^/api/essays/(?<nxtPid>[^/]+?)/like(?:/)?$"
    },
    {
      "page": "/api/essays/[id]/status",
      "regex": "^/api/essays/([^/]+?)/status(?:/)?$",
      "routeKeys": {
        "nxtPid": "nxtPid"
      },
      "namedRegex": "^/api/essays/(?<nxtPid>[^/]+?)/status(?:/)?$"
    },
    {
      "page": "/sign-in/[[...sign-in]]",
      "regex": "^/sign\\-in(?:/(.+?))?(?:/)?$",
      "routeKeys": {
        "nxtPsignin": "nxtPsign-in"
      },
      "namedRegex": "^/sign\\-in(?:/(?<nxtPsignin>.+?))?(?:/)?$"
    },
    {
      "page": "/sign-up/[[...sign-up]]",
      "regex": "^/sign\\-up(?:/(.+?))?(?:/)?$",
      "routeKeys": {
        "nxtPsignup": "nxtPsign-up"
      },
      "namedRegex": "^/sign\\-up(?:/(?<nxtPsignup>.+?))?(?:/)?$"
    }
  ],
  "staticRoutes": [
    {
      "page": "/",
      "regex": "^/(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/(?:/)?$"
    },
    {
      "page": "/_not-found",
      "regex": "^/_not\\-found(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/_not\\-found(?:/)?$"
    },
    {
      "page": "/admin",
      "regex": "^/admin(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/admin(?:/)?$"
    },
    {
      "page": "/create",
      "regex": "^/create(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/create(?:/)?$"
    },
    {
      "page": "/dashboard",
      "regex": "^/dashboard(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/dashboard(?:/)?$"
    },
    {
      "page": "/essays",
      "regex": "^/essays(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/essays(?:/)?$"
    },
    {
      "page": "/profile",
      "regex": "^/profile(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/profile(?:/)?$"
    },
    {
      "page": "/search",
      "regex": "^/search(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/search(?:/)?$"
    },
    {
      "page": "/settings",
      "regex": "^/settings(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/settings(?:/)?$"
    }
  ],
  "dataRoutes": [],
  "rsc": {
    "header": "RSC",
    "varyHeader": "RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Router-Segment-Prefetch",
    "prefetchHeader": "Next-Router-Prefetch",
    "didPostponeHeader": "x-nextjs-postponed",
    "contentTypeHeader": "text/x-component",
    "suffix": ".rsc",
    "prefetchSuffix": ".prefetch.rsc",
    "prefetchSegmentHeader": "Next-Router-Segment-Prefetch",
    "prefetchSegmentSuffix": ".segment.rsc",
    "prefetchSegmentDirSuffix": ".segments"
  },
  "rewriteHeaders": {
    "pathHeader": "x-nextjs-rewritten-path",
    "queryHeader": "x-nextjs-rewritten-query"
  },
  "rewrites": []
}